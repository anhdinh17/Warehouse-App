//
//  DatabaseManager.swift
//  Warehouse App
//
//  Created by Anh Dinh on 4/10/22.
//

import Foundation
import UIKit
import FirebaseDatabase

final class DatabaseManager {
    public static let shared = DatabaseManager()
    private let database = Database.database().reference()
    private init() {}
    private var readDataValues: [String:Int] = [:]
    
    // insert items into Realtime Database
    public func insertItems(item: String, quantity: Int, completion: @escaping (Bool)->Void){
        
        guard let username = UserDefaults.standard.string(forKey: "username") else {
            return
        }
        
        database.child("users").child(username).child("Items").childByAutoId().observeSingleEvent(of: .value) { [weak self] snapshot in
            // check if there's a node of "Items" and its value
            guard var itemsDictionary = snapshot.value as? [String:Any] else {
                // Nếu ko có node username và node "Items", tạo node username và node "Items"
                // childByAutoID() generates an auto unique ID for each node of an item.
                self?.database.child("users").child(username).child("Items").childByAutoId().setValue(
                    // Đây là structure mà mình muốn dưới 1 node
                    [
                        "Item": item,
                        "Quantity":quantity
                    ]
                ){error,_ in
                    guard error == nil else {
                        // trả về false, case này là lần đầu tạo "Items" node
                        completion(false)
                        return
                    }
                    // Trả về true nếu tạo thành công "Items"
                    completion(true)
                }
                return
            }
            itemsDictionary["Item"] = item
            itemsDictionary["Quantity"] = quantity
            self?.database.child("users").child(username).child("Items").childByAutoId().setValue(itemsDictionary){ error,_ in
                guard error == nil else {
                    completion(false)
                    return
                }
                completion(true)
            }
        }
    }
    
    // Read items from Realtime Database
    public func readItems(completion: @escaping ([String:Any]?,String?)->Void){
        
        guard let username = UserDefaults.standard.string(forKey: "username") else {
            return
        }
        
        // How to read data created with childByAutoId()
        // (withPath: "Items").observe(.childAdded) get what under "Items" including key and what underneath it
        // snaphot.values la tung thang dictionary rieng re
        Database.database().reference(withPath: "users/\(username)/Items").observe(.childAdded){snapshot in
            // snaphost.value = what underneath the key ID
            guard let values = snapshot.value as? [String:Any]  else {
                completion([:],"")
                return
            }
            // get the Key generated by childByAutoId()
            var id = snapshot.key
            print("Values of Items: \(values)")
            completion(values,id)
        }
    }
    
    // update quantity of current Items
    public func updateNewQuantity(item: String,id: String,newQuantity: Int, completion: @escaping (Bool)->Void){
        
        guard let username = UserDefaults.standard.string(forKey: "username") else {
            return
        }
        
        let newQuantity = [
            "Item":item,
            "Quantity":newQuantity
        ] as [String : Any]
        database.child("users").child(username).child("Items").child(id).setValue(newQuantity){ error,_ in
            guard error == nil else {
                completion(false)
                return
            }
            completion(true)
        }
    }
    
    // store receiver info
    public func storeTransaction(receiverName: String,item: String, quantity: Int, date: String, completion: @escaping(Bool)->Void){
        
        guard let username = UserDefaults.standard.string(forKey: "username") else {
            return
        }
        
        database.child("users").child(username).child("Receivers").observeSingleEvent(of: .value) { [weak self] snapshot in
            guard var receiverDictionary = snapshot.value as? [String:Any] else {
                // if there's no "Receivers" yet
                self?.database.child("users").child(username).child("Receivers").setValue(
                    [
                        receiverName: [
                            "Item": item,
                            "Quantity": quantity,
                            "Date": date
                        ]
                    ]
                ){error,_ in
                    guard error == nil else{
                        completion(false)
                        return
                    }
                    completion(true)
                }
                return
            }
            // if there's already "Receivers", store new value into db.
            receiverDictionary[receiverName] = ["Item":item,"Quantity":quantity,"Date":date]
            self?.database.child("users").child(username).child("Receivers").setValue(receiverDictionary){(error,_) in
                guard error == nil else {
                    completion(false)
                    return
                }
                completion(true)
            }
        }
    }
    
    // func to read Receiver data
    // set parameter of completion to be optional because when going to the page for the first time, we don't have anything to fetch, so app won't crash.
    func readDataFromReceivers(completion: @escaping ([String:Any]?)->Void){
        
        guard let username = UserDefaults.standard.string(forKey: "username") else {
            return
        }
        
        database.child("users").child(username).child("Receivers").observeSingleEvent(of: .value) { snapshot in
            // snapshot.value la 1 thang big dictionary, chua toan bo nhung gi under "Receivers" node
            guard let values = snapshot.value else {
                completion([:])
                return
            }
            completion(values as? [String : Any] ?? nil)
        }
        
    }
    
    // Func to add email to Realtime Database after creating an account
    func addEmailToRealtimeDatabase(email: String, username: String, completion: @escaping (Bool)->Void){
        database.child("users").child(username).observeSingleEvent(of: .value) { [weak self] snapshot in
            guard var userInfoDictionary = snapshot.value as? [String:Any] else {
                self?.database.child("users").child(username).setValue(
                    [
                        "email":email
                    ]
                ){error,_ in
                    guard error == nil else {
                        completion(false)
                        return
                    }
                    completion(true)
                }
                return
            }
            
            userInfoDictionary[username] = ["email":email]
            self?.database.child("users").child(username).setValue(userInfoDictionary, withCompletionBlock: { error,_ in
                guard error == nil else {
                    completion(false)
                    return
                }
                completion(true)
            })
        }
    }
    
    // Func to get username corresponding to email
    func getUsername(email: String, completion: @escaping (String?)->Void){
        database.child("users").observeSingleEvent(of: .value) { snapshot in
            guard let userDictionary = snapshot.value as? [String:[String:Any]] else {
                return
            }
            for (key,value) in userDictionary{
                if value["email"] as? String == email {
                    completion(key)
                    break
                }
            }
        }
    }
    
}

//MARK: - NOTES
